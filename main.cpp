
#include <iostream>
#include <string>
#include "cmath"
#include "other.h"

#include <ctime>
#include <iostream>
#include <tchar.h>
//#include <cstdio>
//#include <cstdarg>
#include "other.h"


#define	  stop __asm nop

int main()
{
	/*
	/////////////////////////////////////////////////////////////////////////////
	// Задание 1. Ссылки.
	//Объявите ссылку на тип double. Посредством ссылки измените значение



	//Раскомментируйте две следующих строчки. Что следует сделать, чтобы
	//linker не выдавал ошибки при создании exe-файла Подсказка: ссылка ref
	//должна быть внешней

	//ref++;




	//Раскомментируйте следующую строку. Что следует сделать, чтобы
	//компилятор не выдавал ошибки
	//int& ref1 = 1;



	//Задан указатель:
	char c='A';
	char* pc = &c;
	//Объявите ссылку на указатель. Посредством ссылки измените
	//а) значение по адресу
	//б) сам адрес


	*/


	//Задание 2. Отличия при передаче параметров а) по значению,
	// б) по ссылке, в) по указателю
	//Объявите и определите три функции , которые увеличивают заданное
	//с помощью параметра значение на 1 ( а) - IncByValue(),
	// б) - IncByPointer(), в) - IncByReference() ). 
	//Проверьте правильность с помощью отладчика.
	//
	//Замечание: объявления функций принято помещать в заголовочный файл
	//int val = 1;//значение этой переменной должно быть увеличено с помощью
	//			//каждой из функций на единицу

	//stop


	//Задание 2а. Передача параметров c помощью указателя и по ссылке.
	//Перегруженные имена функций.
	//Создайте функцию (функции) Swap(), которая меняет значения
	//переменных nX и nY местами.
	// а)Функция должна принимать два указателя на int, оперируя с
	//которыми менять значения переменных в вызывающей программе
	// б)Функция должна принимать две ссылки на int
	//Проверьте правильность с помощью приведенного ниже фрагмента.

	//int	nX = 1;
	//int nY = -1;
	//Swap(...  ,  ...);	//поменяли местами значения nX и nY с
	//					//помощью указателей на nX и nY
	//Swap(...  ,  ...);	//а теперь обратно с помощью ссылок на nX и nY
	//stop


	//Задание 3. Указатели на массивы в качестве аргументов.
	//3a.Напишите два варианта функции поиска минимального элемента
	//1. во встроенном двухмерном массиве
	//2. в динамическом двухмерном массиве (обе размерности вычисляются)

	//1.Например:
	//int ar[N][M] = {список инициализаторов};//подумайте - как и где должны быть заданы N и M
	//int res = Min(ar, ... может быть, понадобится передать еще какие-нибудь данные);

	/*
		//3b. Напишите функцию сравнения двух строк - MyStrCmp():
		//Функция должна принимать два указателя на сравниваемые
		//строки (возможно Вы должны указать компилятору, что функция
		//не имеет права модифицировать содержимое строк)
		//Функция должна возвращать отрицательное значение, если
		//первая строка лексиграфически меньше второй, 0 - если
		//они равны и положительное значение, если первая строка
		//больше второй.
		//Вспомните, что признаком конца строки является нулевой байт.


		//Создайте две строки для сравнения:

		//Вызовите функцию сравнения

		//Выведите результат сравнения с помощью cout:

		stop
	*/
	/*
		//Задание 4.Ссылки в качестве параметров. Передача указателя на встроенный
		//массив в качестве параметра функции.
		//Напишите две взаимодополняющие друг друга функции:
		//1.  ... DayOfYear(...)
		//- преобразует день месяца (число,месяц и год задаются в качестве параметров)
		//в порядковый день года(возвращаемое значение)
		//2. ... DayOfMonth(...) - функция преобразует порядковый день года в день месяца
		// (принимает год и порядковый день года в качестве параметров и должна сформировать
		// день месяца и номер месяца и каким-то образом сообщить эти значения вызывающей процедуре)

		//Проверьте работоспособность обеих функций с помощью следующего фрагмента:


		//В процессе вычислений Вам придется учитывать "високосный - невисокосный" год.
		//Для этого предлагается в каждую функцию в качестве одного из параметров передавать
		//данные приведенного ниже двухмерного массива nDayTab

		int nDayTab[2][12]={
			{31,28,31,30,31,30,31,31,30,31,30,31}, //невисокосный год
			{31,29,31,30,31,30,31,31,30,31,30,31}	};	//високосный год

		//Вызов функции DayOfYear
		//...


		//Проверка результата обратной функцией DayOfMonth
		//...

		stop
	*/
	//Задание 5. Создайте одномерный массив (размерность вычисляется в процессе
	//выполнения программы), заполните его значениями.
	//Напишите функцию, которая добавляет в массив ервре значение только при
	//условии, что такого значения в массиве еще нет. Подсказка: при этом размер
	//массива должен увеличиться! Функция НЕ ДОЛЖНА ничего возвращать.

	//Для проверки напишите функцию, которая выводит значения всех элементов на экран
	/*{
		size_t index = 0, arrSize = 1;
		int num = 0;
		int* arr = (int*)malloc(arrSize * sizeof(int));// Выделяю блок памяти на массив.
		while (true) {
			std::cout << "Please enter number: " << std::endl << "=> ";
			std::cin >> num;
			addInArray(arr, index, arrSize, num);
			printOneDimArray(arr, arrSize);
		}
		stop;
	}*/

	//Задание 6. Рекурсивные функции. Напишите рекурсивную функцию вычисления
	//суммы первых N натуральных чисел.
	/*{
		int startNum = 0, maxNum = 0, res = 0;
		while (true) {
			std::cout << "Please enter the number of values to be calculated: " << std::endl << "=> ";
			std::cin >> maxNum;
			res = sumWithRecursion(startNum, maxNum);
			std::cout << "Result: " << res << std::endl;
		}
		stop;
	}*/

	//Задание 7а. Функции с переменным числом параметров.
	//Напишите функцию (дана заготовка VarArgs, не использующая
	// макросы), которая принимает переменное число аргументов
	// типа int и выводит на печать число принятых параметров и
	// их значения.
	// Признаком конца списка является нулевое значение.
	/*{
		int nN1 = 5, nN2 = 11, nN3 = 4, nN4 = 7, nN5 = -1;
		VarArgs(nN1, 0);
		VarArgs(nN1, nN2, 0);
		VarArgs(nN1, nN2, nN3, nN4, nN5, 0);
		stop;
	}*/

	//Задание 7б. Модифицируйте функцию 5а с помощью макросов
	// va_start, va_arg, va_end
	/*{
		std::cout << "--- Start Task 7b ---" << std::endl;
		size_t index = 0, arrSize = 1;
		int count = 14;
		int* arr = (int*)malloc(arrSize * sizeof(int));
		addInArrayEndless(arr, index, arrSize, count, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 9, 10, 11);
		printOneDimArray(arr, arrSize);
		stop;
	}*/

	//Задание 8. Возвращение адреса.
	//Напишите функцию, которая находит минимальное значение в массиве,
	// таким образом, чтобы ее вызов можно было использовать слева от знака 
	// равенства: *MyMin(параметры) = 0;
	/*{
		size_t index = 0, arrSize = 1;
		int num = 0;
		int* arr = (int*)malloc(arrSize * sizeof(int));// Выделяю блок памяти на массив.
		// Заполняем массив случайными значениями
		srand(time(0));
		rsize_t min = 1, max = 100; // указываем диапазон от 1 до 100
		while (index < 10) {
			num = min + rand() % (max - min);
			std::cout << "Set number: " << num << std::endl;
			addInArray(arr, index, arrSize, num);
		}
		printOneDimArray(arr, arrSize);
		*MyMin(arr, index) = 0;
		printOneDimArray(arr, arrSize);
		stop;
	}*/
	return 0;
}//main

template<typename T>
void printOneDimArray(const T arr, size_t rows) {

	std::cout << "/ -----" << " Print one-dimensional Array with";
	std::cout << " Rows: " << rows << std::endl;
	for (size_t i = 0; i < rows; i++) {
		if (i == 0) {
			std::cout << "[";
		}
		std::cout << arr[i];
		if (i == (rows - 1)) {
			std::cout << "]" << std::endl;
		}
		else {
			std::cout << " ";
		}
	}
	std::cout << "/ -----" << std::endl;
}

template<typename T>
void printTwoDimArray(const T arr, size_t rows, size_t columns) {

	std::cout << "/ -----" << " Print two-dimensional Array with";
	std::cout << " Rows: " << rows << " Columns: " << columns << std::endl;
	for (size_t i = 0; i < rows; i++) {
		for (size_t j = 0; j < columns; j++) {
			if (j == 0) {
				std::cout << "/ ";
			}
			std::cout << arr[i][j];
			if (j == (columns - 1)) {
				std::cout << " /" << std::endl;
			}
		}
	}
	std::cout << "/ -----" << std::endl;
}